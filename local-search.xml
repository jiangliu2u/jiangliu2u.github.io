<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用premake生成项目</title>
    <link href="/2021/06/12/game-engine1/"/>
    <url>/2021/06/12/game-engine1/</url>
    
    <content type="html"><![CDATA[<p>Visual Studio 进行项目配置较为复杂,利用premake可快速生成,premake使用lua编写配置文件,编写方便,语法简单,跨平台.<br>开始之前需要下载premake5.exe可执行文件,项目地址为<a href="https://github.com/premake">https://github.com/premake</a><br>下面使用premake生成一个OpenGL项目.<br>项目目录结构如下</p><p><img src="/img/premake/folder.png"><br>在项目根目录下新建一个premake5.lua文件,内容如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--解决方案名称</span><br>workspace <span class="hljs-string">&quot;OpenGL-Sandbox&quot;</span> <br><span class="hljs-comment">--架构</span><br>    architecture <span class="hljs-string">&quot;x64&quot;</span> <br>    <span class="hljs-comment">--启动项目名称</span><br>startproject <span class="hljs-string">&quot;OpenGL-Sandbox&quot;</span> <br>    <span class="hljs-comment">--构建类型</span><br>configurations <br>&#123;<br><span class="hljs-string">&quot;Debug&quot;</span>,<br><span class="hljs-string">&quot;Release&quot;</span><br>&#125;<br> <span class="hljs-comment">--指定编译或链接过程的标记</span><br>flags<br>&#123;<br>        <span class="hljs-comment">--多核并行编译</span><br><span class="hljs-string">&quot;MultiProcessorCompile&quot;</span> <br>&#125;<br><span class="hljs-comment">--全局变量,指定输出的目录</span><br>outputdir = <span class="hljs-string">&quot;%&#123;cfg.buildcfg&#125;-%&#123;cfg.system&#125;-%&#123;cfg.architecture&#125;&quot;</span><br><br><span class="hljs-comment">--定义子项目的位置</span><br>IncludeDirs = &#123;&#125;<br>IncludeDirs[<span class="hljs-string">&quot;GLFW&quot;</span>] = <span class="hljs-string">&quot;vendor/GLFW&quot;</span><br>IncludeDirs[<span class="hljs-string">&quot;Glad&quot;</span>] = <span class="hljs-string">&quot;vendor/Glad&quot;</span><br>IncludeDirs[<span class="hljs-string">&quot;imgui&quot;</span>] = <span class="hljs-string">&quot;vendor/imgui&quot;</span><br><br><span class="hljs-comment">--包含子项目,子项目中的premake5.lua会继承解决方案的premake5.lua中的全局变量</span><br>include <span class="hljs-string">&quot;vendor/GLFW&quot;</span><br>include <span class="hljs-string">&quot;vendor/Glad&quot;</span><br>include <span class="hljs-string">&quot;vendor/imgui&quot;</span><br><br><span class="hljs-comment">--下面定义启动项目OpenGl-Sandbox</span><br>project <span class="hljs-string">&quot;OpenGL-Sandbox&quot;</span><br>kind <span class="hljs-string">&quot;ConsoleApp&quot;</span> <span class="hljs-comment">--项目类型,此处为命令行项目</span><br>language <span class="hljs-string">&quot;C++&quot;</span> <span class="hljs-comment">-- 语言 c++</span><br>cppdialect <span class="hljs-string">&quot;C++17&quot;</span> <span class="hljs-comment">--c++版本</span><br>    <br>targetdir (<span class="hljs-string">&quot;./bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>) <span class="hljs-comment">--生成的目录 prj是premake内置的变量,表示项目对象</span><br>objdir (<span class="hljs-string">&quot;./bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>) <span class="hljs-comment">--中间文件目录 prj是premake内置的变量,表示项目对象</span><br><br>files <span class="hljs-comment">--项目的源文件</span><br>&#123;<br><span class="hljs-string">&quot;src/**.h&quot;</span>,<br><span class="hljs-string">&quot;src/**.cpp&quot;</span>,<br><span class="hljs-string">&quot;src/**.c&quot;</span>,<br><span class="hljs-string">&quot;vendor/stb_image/**.h&quot;</span>,<br><span class="hljs-string">&quot;vendor/stb_image/**.cpp&quot;</span>,<br><span class="hljs-string">&quot;vendor/glm/**.hpp&quot;</span>,<br><span class="hljs-string">&quot;vendor/glm/**.inl&quot;</span>,<br>&#125;<br><br>includedirs <span class="hljs-comment">--项目包含的目录</span><br>&#123;<br><span class="hljs-string">&quot;src&quot;</span>,<br><span class="hljs-string">&quot;vendor&quot;</span>,<br><span class="hljs-string">&quot;vendor/GLFW/include&quot;</span>,<br><span class="hljs-string">&quot;vendor/Glad/include&quot;</span>,<br><span class="hljs-string">&quot;vendor/imgui&quot;</span>,<br><span class="hljs-string">&quot;vendor/glm&quot;</span>,<br><span class="hljs-string">&quot;vendor/stb_image&quot;</span><br>&#125;<br><br><br>links &#123; <span class="hljs-comment">--链接的静态库</span><br><span class="hljs-string">&quot;Glad&quot;</span>,<br><span class="hljs-string">&quot;GLFW&quot;</span>,<br><span class="hljs-string">&quot;ImGui&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编写完解决方案的premake配置后,开始编写子项目的premake配置,下面以GLFW为例,在vendor/GLFW下新建premake5.lua文件.内容如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;GLFW&quot;</span><br>kind <span class="hljs-string">&quot;StaticLib&quot;</span> <span class="hljs-comment">--项目类型为静态库</span><br>language <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-comment">--语言为C</span><br><br>files <span class="hljs-comment">--项目的源文件</span><br>&#123;<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/include/GLFW/glfw3.h&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/include/GLFW/glfw3native.h&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/glfw_config.h&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/context.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/init.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/input.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/monitor.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/vulkan.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/window.c&quot;</span><br>&#125;<br><br>filter <span class="hljs-string">&quot;system:windows&quot;</span> <span class="hljs-comment">--筛选器 定义windows系统的配置</span><br>systemversion <span class="hljs-string">&quot;latest&quot;</span> <span class="hljs-comment">--系统版本</span><br>staticruntime <span class="hljs-string">&quot;On&quot;</span> <span class="hljs-comment">--设置RuntimeLibrary,on时动态库也会生成lib,dll被编译进exe</span><br><br>files <span class="hljs-comment">--项目源文件</span><br>&#123;<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_init.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_joystick.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_monitor.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_time.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_thread.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_window.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/wgl_context.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/egl_context.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/osmesa_context.c&quot;</span><br>&#125;<br><br>defines <span class="hljs-comment">--定义宏</span><br>&#123; <br><span class="hljs-string">&quot;_GLFW_WIN32&quot;</span>,<br><span class="hljs-string">&quot;_CRT_SECURE_NO_WARNINGS&quot;</span><br>&#125;<br><br>filter <span class="hljs-string">&quot;configurations:Debug&quot;</span> <span class="hljs-comment">--Debug模式的配置</span><br>runtime <span class="hljs-string">&quot;Debug&quot;</span> <span class="hljs-comment">--运行时</span><br>symbols <span class="hljs-string">&quot;on&quot;</span> <span class="hljs-comment">--开启pdb文件</span><br><br>filter <span class="hljs-string">&quot;configurations:Release&quot;</span> <span class="hljs-comment">--Release模式</span><br>runtime <span class="hljs-string">&quot;Release&quot;</span> <br>optimize <span class="hljs-string">&quot;on&quot;</span> <span class="hljs-comment">--开启优化</span><br><br><br>includedirs&#123; <span class="hljs-comment">--包含目录</span><br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/include&quot;</span>, <span class="hljs-comment">--IncludeDir 为上面解决方案配置文件中定义的全局变量</span><br>&#125;<br>targetdir (<span class="hljs-string">&quot;./bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>) <span class="hljs-comment">--生成目录</span><br>objdir (<span class="hljs-string">&quot;./bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>) <span class="hljs-comment">--中间文件目录</span><br></code></pre></td></tr></table></figure><p>imgui,Glad项目配置类似. 都编写好后,运行premake5.exe vs2019 就会生成vs解决方案</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
