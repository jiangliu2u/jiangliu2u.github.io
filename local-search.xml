<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Golang image标准库的使用</title>
    <link href="/2021/07/26/go-image/"/>
    <url>/2021/07/26/go-image/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>go中的image和image/color包中利用颜色color.Color和色彩模式color.Model来描述图片的颜色,image.Point和image.Rectangle则用来表示图像的2D几何形状. image.Image则把这两个概念组合在一起来表示一张图片.</p><p>color.Color是一个接口,定义如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Color <span class="hljs-keyword">interface</span>&#123;<br>    <span class="hljs-comment">//该方法返回rgba值,,转化可能是有损的</span><br>    RGBA()  (r, g, b, a <span class="hljs-keyword">uint32</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>color.Model接口,可以把自身的模式转换为其他模式,转化可能是有损的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Model <span class="hljs-keyword">interface</span> &#123;<br>Convert(c Color) Color<br>&#125;<br></code></pre></td></tr></table></figure><p>image.Point是在以向右为x轴正方向,向下为y轴正方向的坐标系中的点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Point <span class="hljs-keyword">struct</span> &#123;<br>    X, Y <span class="hljs-keyword">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>image.Rectangle长方形则是由两个Point组成,两个点分别表示长方形左上角和右下角在上述坐标系中的位置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Rectangle <span class="hljs-keyword">struct</span> &#123;<br>    Min, Max Point<br>&#125;<br></code></pre></td></tr></table></figure><p>image中包含了长方形中的每个像素的颜色和模式,其定义很好的解释这一点</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Image <span class="hljs-keyword">interface</span> &#123;<br>    <span class="hljs-comment">// 色彩模式.</span><br>    ColorModel() color.Model<br>    <span class="hljs-comment">//长方形</span><br>    Bounds() Rectangle<br>    <span class="hljs-comment">//xy 处的颜色</span><br>    At(x, y <span class="hljs-keyword">int</span>) color.Color<br>&#125;<br></code></pre></td></tr></table></figure><p>常见的色彩模式有RGBA,NRGBA,CMYK等等等.</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>在游戏开发中,经常会使用合图,来减少图片数量,提升加载速度.bmfont文件其实也是利用了合图,只是配置文件中除了包含子图片位置信息之外,还包含了每个子图片对应的字符以及其他一些信息.</p><p>在开发过程中有时需要把合图切开,只需要从配置文件中读取合图中的子图片信息,然后利用一些工具(比如python中的pillow)就能将合图分割成一张张小图</p><p>下面利用image库来对bmfont进行切图</p><p>首先bmfont字体通常包含一个fnt文件和一张或多张png图片,fnt文件通常格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">info face=&quot;Arial&quot; size=-32 bold=0 italic=0 charset=&quot;&quot; unicode=1 stretchH=100 smooth=1 aa=1 padding=0,1,1,0 spacing=1,1 outline=0<br>common lineHeight=46 base=29 scaleW=200 scaleH=200 pages=1 packed=0 alphaChnl=0 redChnl=4 greenChnl=4 blueChnl=4<br>page id=0 file=&quot;font.png&quot;<br>chars count=19<br>char id=44   x=50    y=94    width=14    height=46    xoffset=0     yoffset=0     xadvance=9     page=0  chnl=15<br>char id=46   x=65    y=94    width=14    height=46    xoffset=0     yoffset=0     xadvance=9     page=0  chnl=15<br>char id=48   x=165   y=0     width=24    height=46    xoffset=0     yoffset=0     xadvance=19    page=0  chnl=15<br>char id=49   x=0     y=47    width=24    height=46    xoffset=0     yoffset=0     xadvance=19    page=0  chnl=15    <br></code></pre></td></tr></table></figure><p>其中对切图有用的信息只有file指定的png信息,以及指定字符的行中的x,y,width,height,其他字段的含义在此不再赘述</p><p>page 行表示该bmfont文件的中包含的png图片数量,file问png文件名,id为png文件索引</p><p>x,y 表示子图的左上角的坐标,width和height表示图片的宽高,结合上述的image.Rectangle,一张子图的长方形表示就是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">image.Rectangle&#123;<br>   Min image.Point&#123;X:x,Y:y&#125;,<br>   Max image.Point&#123;X:x+width,Y:y+height&#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>已经知道子图片在合图中的位置,就容易把它从中取出来,先进行一些定义</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//Font 每个字符信息</span><br><span class="hljs-keyword">type</span> Font <span class="hljs-keyword">struct</span> &#123;<br>Id     <span class="hljs-keyword">int</span> <span class="hljs-comment">//字符id</span><br>Rect   image.Rectangle <span class="hljs-comment">//子图的长方形信息</span><br>PageId <span class="hljs-keyword">int</span> <span class="hljs-comment">//对应的png索引</span><br>&#125;<br><br><span class="hljs-keyword">type</span> FontInfo <span class="hljs-keyword">struct</span> &#123;<br>Pages <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">string</span> <span class="hljs-comment">//所有png的集合,key为pageId,value为png名称</span><br>Fonts []Font <span class="hljs-comment">//包含的所有字符信息</span><br>Dir   <span class="hljs-keyword">string</span> <span class="hljs-comment">//bmfont文件路径</span><br>Name  <span class="hljs-keyword">string</span><span class="hljs-comment">//bmfont文件名称,切的子图放在该名称的文件夹中</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在开始处理bmfont的配置文件,读取文件后,按行处理,然后利用正则表达式匹配x,y,width,height,id和pageid,部分代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//解析fnt文件</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">parseContent</span><span class="hljs-params">(lines []<span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(fontInfo FontInfo, err error)</span></span> &#123;<br>fontInfo = FontInfo&#123;<br>Pages: <span class="hljs-keyword">map</span>[<span class="hljs-keyword">int</span>]<span class="hljs-keyword">string</span>&#123;&#125;,<br>Fonts: <span class="hljs-built_in">make</span>([]Font, <span class="hljs-number">0</span>),<br>&#125;<br><span class="hljs-keyword">for</span> _, line := <span class="hljs-keyword">range</span> lines &#123;<br><span class="hljs-keyword">if</span> Has(line, <span class="hljs-string">&quot;page&quot;</span>) &amp;&amp; Has(line, <span class="hljs-string">&quot;file&quot;</span>) &#123;<br>re := regexp.MustCompile(<span class="hljs-string">`file=&quot;(.*?)&quot;`</span>)<br>s := re.FindString(line)<br>fileName := Replace(s, <span class="hljs-string">&quot;file=&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>fileName = Replace(fileName, <span class="hljs-string">`&quot;`</span>, <span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">//png文件名</span><br><br>re = regexp.MustCompile(<span class="hljs-string">`pageid=\d+`</span>)<br>s = re.FindString(line)<br>s = Replace(s, <span class="hljs-string">&quot;pageid=&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>pageId, e := strconv.Atoi(s)<span class="hljs-comment">//png文件索引</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;pageId to int error&quot;</span>)<br>err = e<br><span class="hljs-keyword">return</span><br>&#125;<br>fontInfo.Pages[pageId] = fileName<br>&#125;<br><span class="hljs-keyword">if</span> Has(line, <span class="hljs-string">&quot;charid&quot;</span>) &#123;<span class="hljs-comment">//对每行的空格都进行了替换处理,所以char id 变成 charid</span><br>font := Font&#123;&#125;<br>re := regexp.MustCompile(<span class="hljs-string">`x=\d+`</span>)<br>s := re.FindString(line)<br>x := Replace(s, <span class="hljs-string">&quot;x=&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>X, e := strconv.Atoi(x)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Println(<span class="hljs-string">&quot;X to int error&quot;</span>)<br>err = e<br><span class="hljs-keyword">return</span><br>&#125;<br>font.Rect.Min.X = X<br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//...</span><br><br>fontInfo.Fonts = <span class="hljs-built_in">append</span>(fontInfo.Fonts, font)<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面开始切图,切图使用SubImage方法,该方法原型如下,输入一个长方形,返回该长方形大小和位置的的图片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SubImage <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r Rectangle)</span> <span class="hljs-title">Image</span></span><br></code></pre></td></tr></table></figure><p>读取png图片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go">   pngFile := path.Join(fonts.Dir, fonts.Pages[font.PageId])<br><br>file, err := os.Open(pngFile)<br><span class="hljs-comment">//错误处理忽略</span><br>img, err := png.Decode(file)<br>   <span class="hljs-keyword">var</span> newPng image.Image<br><span class="hljs-comment">//下面要对图片类型进行判断才能切图</span><br>   <span class="hljs-keyword">switch</span> img.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> *image.RGBA:<br> newPng = img.(*image.RGBA).SubImage(font.Rect)<br>   <span class="hljs-comment">//...</span><br>   <span class="hljs-comment">//...</span><br>   <span class="hljs-comment">//...</span><br>   <span class="hljs-comment">//...</span><br>   &#125;<br>   pngDir := path.Join(fonts.Dir, fonts.Name)<br>_, err = os.Stat(pngDir)<br><span class="hljs-keyword">if</span> os.IsNotExist(err) &#123;<br>os.MkdirAll(pngDir, <span class="hljs-number">0777</span>)<br>&#125;<br>  outFileName := path.Join(pngDir, <span class="hljs-keyword">string</span>(<span class="hljs-keyword">rune</span>(font.Id))+<span class="hljs-string">&quot;.png&quot;</span>)<span class="hljs-comment">//文件名和路径</span><br>outFile, err := os.OpenFile(outFileName, os.O_CREATE, <span class="hljs-number">0777</span>)<br><span class="hljs-keyword">defer</span> outFile.Close()<br>err = png.Encode(outFile, newPng)<span class="hljs-comment">//写入文件</span><br></code></pre></td></tr></table></figure><p>以上就是使用go的image库切图的应用</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>image</tag>
      
      <tag>png</tag>
      
      <tag>bmfont</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用premake生成项目</title>
    <link href="/2021/06/12/game-engine1/"/>
    <url>/2021/06/12/game-engine1/</url>
    
    <content type="html"><![CDATA[<p>Visual Studio 进行项目配置较为复杂,利用premake可快速生成,premake使用lua编写配置文件,编写方便,语法简单,跨平台.<br>开始之前需要下载premake5.exe可执行文件,项目地址为<a href="https://github.com/premake">https://github.com/premake</a><br>下面使用premake生成一个OpenGL项目.<br>项目目录结构如下</p><p><img src="/img/premake/folder.png"><br>在项目根目录下新建一个premake5.lua文件,内容如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">--解决方案名称</span><br>workspace <span class="hljs-string">&quot;OpenGL-Sandbox&quot;</span> <br><span class="hljs-comment">--架构</span><br>    architecture <span class="hljs-string">&quot;x64&quot;</span> <br>    <span class="hljs-comment">--启动项目名称</span><br>startproject <span class="hljs-string">&quot;OpenGL-Sandbox&quot;</span> <br>    <span class="hljs-comment">--构建类型</span><br>configurations <br>&#123;<br><span class="hljs-string">&quot;Debug&quot;</span>,<br><span class="hljs-string">&quot;Release&quot;</span><br>&#125;<br> <span class="hljs-comment">--指定编译或链接过程的标记</span><br>flags<br>&#123;<br>        <span class="hljs-comment">--多核并行编译</span><br><span class="hljs-string">&quot;MultiProcessorCompile&quot;</span> <br>&#125;<br><span class="hljs-comment">--全局变量,指定输出的目录</span><br>outputdir = <span class="hljs-string">&quot;%&#123;cfg.buildcfg&#125;-%&#123;cfg.system&#125;-%&#123;cfg.architecture&#125;&quot;</span><br><br><span class="hljs-comment">--定义子项目的位置</span><br>IncludeDirs = &#123;&#125;<br>IncludeDirs[<span class="hljs-string">&quot;GLFW&quot;</span>] = <span class="hljs-string">&quot;vendor/GLFW&quot;</span><br>IncludeDirs[<span class="hljs-string">&quot;Glad&quot;</span>] = <span class="hljs-string">&quot;vendor/Glad&quot;</span><br>IncludeDirs[<span class="hljs-string">&quot;imgui&quot;</span>] = <span class="hljs-string">&quot;vendor/imgui&quot;</span><br><br><span class="hljs-comment">--包含子项目,子项目中的premake5.lua会继承解决方案的premake5.lua中的全局变量</span><br>include <span class="hljs-string">&quot;vendor/GLFW&quot;</span><br>include <span class="hljs-string">&quot;vendor/Glad&quot;</span><br>include <span class="hljs-string">&quot;vendor/imgui&quot;</span><br><br><span class="hljs-comment">--下面定义启动项目OpenGl-Sandbox</span><br>project <span class="hljs-string">&quot;OpenGL-Sandbox&quot;</span><br>kind <span class="hljs-string">&quot;ConsoleApp&quot;</span> <span class="hljs-comment">--项目类型,此处为命令行项目</span><br>language <span class="hljs-string">&quot;C++&quot;</span> <span class="hljs-comment">-- 语言 c++</span><br>cppdialect <span class="hljs-string">&quot;C++17&quot;</span> <span class="hljs-comment">--c++版本</span><br>    <br>targetdir (<span class="hljs-string">&quot;./bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>) <span class="hljs-comment">--生成的目录 prj是premake内置的变量,表示项目对象</span><br>objdir (<span class="hljs-string">&quot;./bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>) <span class="hljs-comment">--中间文件目录 prj是premake内置的变量,表示项目对象</span><br><br>files <span class="hljs-comment">--项目的源文件</span><br>&#123;<br><span class="hljs-string">&quot;src/**.h&quot;</span>,<br><span class="hljs-string">&quot;src/**.cpp&quot;</span>,<br><span class="hljs-string">&quot;src/**.c&quot;</span>,<br><span class="hljs-string">&quot;vendor/stb_image/**.h&quot;</span>,<br><span class="hljs-string">&quot;vendor/stb_image/**.cpp&quot;</span>,<br><span class="hljs-string">&quot;vendor/glm/**.hpp&quot;</span>,<br><span class="hljs-string">&quot;vendor/glm/**.inl&quot;</span>,<br>&#125;<br><br>includedirs <span class="hljs-comment">--项目包含的目录</span><br>&#123;<br><span class="hljs-string">&quot;src&quot;</span>,<br><span class="hljs-string">&quot;vendor&quot;</span>,<br><span class="hljs-string">&quot;vendor/GLFW/include&quot;</span>,<br><span class="hljs-string">&quot;vendor/Glad/include&quot;</span>,<br><span class="hljs-string">&quot;vendor/imgui&quot;</span>,<br><span class="hljs-string">&quot;vendor/glm&quot;</span>,<br><span class="hljs-string">&quot;vendor/stb_image&quot;</span><br>&#125;<br><br><br>links &#123; <span class="hljs-comment">--链接的静态库</span><br><span class="hljs-string">&quot;Glad&quot;</span>,<br><span class="hljs-string">&quot;GLFW&quot;</span>,<br><span class="hljs-string">&quot;ImGui&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>编写完解决方案的premake配置后,开始编写子项目的premake配置,下面以GLFW为例,在vendor/GLFW下新建premake5.lua文件.内容如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs lua">project <span class="hljs-string">&quot;GLFW&quot;</span><br>kind <span class="hljs-string">&quot;StaticLib&quot;</span> <span class="hljs-comment">--项目类型为静态库</span><br>language <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-comment">--语言为C</span><br><br>files <span class="hljs-comment">--项目的源文件</span><br>&#123;<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/include/GLFW/glfw3.h&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/include/GLFW/glfw3native.h&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/glfw_config.h&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/context.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/init.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/input.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/monitor.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/vulkan.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/window.c&quot;</span><br>&#125;<br><br>filter <span class="hljs-string">&quot;system:windows&quot;</span> <span class="hljs-comment">--筛选器 定义windows系统的配置</span><br>systemversion <span class="hljs-string">&quot;latest&quot;</span> <span class="hljs-comment">--系统版本</span><br>staticruntime <span class="hljs-string">&quot;On&quot;</span> <span class="hljs-comment">--设置RuntimeLibrary,on时动态库也会生成lib,dll被编译进exe</span><br><br>files <span class="hljs-comment">--项目源文件</span><br>&#123;<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_init.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_joystick.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_monitor.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_time.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_thread.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/win32_window.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/wgl_context.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/egl_context.c&quot;</span>,<br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/src/osmesa_context.c&quot;</span><br>&#125;<br><br>defines <span class="hljs-comment">--定义宏</span><br>&#123; <br><span class="hljs-string">&quot;_GLFW_WIN32&quot;</span>,<br><span class="hljs-string">&quot;_CRT_SECURE_NO_WARNINGS&quot;</span><br>&#125;<br><br>filter <span class="hljs-string">&quot;configurations:Debug&quot;</span> <span class="hljs-comment">--Debug模式的配置</span><br>runtime <span class="hljs-string">&quot;Debug&quot;</span> <span class="hljs-comment">--运行时</span><br>symbols <span class="hljs-string">&quot;on&quot;</span> <span class="hljs-comment">--开启pdb文件</span><br><br>filter <span class="hljs-string">&quot;configurations:Release&quot;</span> <span class="hljs-comment">--Release模式</span><br>runtime <span class="hljs-string">&quot;Release&quot;</span> <br>optimize <span class="hljs-string">&quot;on&quot;</span> <span class="hljs-comment">--开启优化</span><br><br><br>includedirs&#123; <span class="hljs-comment">--包含目录</span><br><span class="hljs-string">&quot;%&#123;IncludeDir.GLFW&#125;/include&quot;</span>, <span class="hljs-comment">--IncludeDir 为上面解决方案配置文件中定义的全局变量</span><br>&#125;<br>targetdir (<span class="hljs-string">&quot;./bin/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>) <span class="hljs-comment">--生成目录</span><br>objdir (<span class="hljs-string">&quot;./bin-int/&quot;</span> .. outputdir .. <span class="hljs-string">&quot;/%&#123;prj.name&#125;&quot;</span>) <span class="hljs-comment">--中间文件目录</span><br></code></pre></td></tr></table></figure><p>imgui,Glad项目配置类似. 都编写好后,运行premake5.exe vs2019 就会生成vs解决方案</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
